#+TITLE: GuangTao's Nix
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2020-11-29 Sun


#+SETUPFILE: ~/Dropbox/org-notes/braindump/tags/nix-tags.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: prop:t p:t

- tags :: [[file:nixos.org][NixOS]], [[file:nixops.org][NixOps]], [[file:../guangtao_learning_programming_languages.org][GuangTao's learning Programming languages]], [[file:nix_wiki.org][Nix Wiki]]

* Nix Documents
:PROPERTIES:
:id: b3517c38-80fc-490f-b0e9-7fef04fd854f
:END:
 - [2020-12-19 Sat 14:35] -> [[id:0196e56d-f4d4-451d-8848-3f37119e7856][Flakes wiki]]
 - [2021-01-20 Wed 20:15] -> [[id:d7186c4b-1c7e-4b2f-80d7-c594a201a4ce][NixOS Documents]]
** [[https://nix.dev/][Welcome to nix.dev — nix.dev documentation]]
:PROPERTIES:
:ID:       f419049c-2f2e-4b5f-93a3-ded0b44b1450
:END:

- [2021-01-20 Wed 15:23] <- [[id:c9d18b9c-bf36-41ce-9659-d02cdb5d6b3e][Functional programming and Nix for reproducible, immutable infrastructure - YouTube]]
* Learning Nix Materials
:PROPERTIES:
:ID:       f125fef0-d7b8-4145-ba15-5a4b3e92abaa
:BRAIN_CHILDREN:
:BRAIN_FRIENDS: 4008c43c-f382-4d45-98d1-891d92c5ef60
:END:
- [2021-01-20 Wed 15:23] -> [[id:c9d18b9c-bf36-41ce-9659-d02cdb5d6b3e][Functional programming and Nix for reproducible, immutable infrastructure - YouTube]]
 - [2021-01-20 Wed 15:51] -> [[id:d0f44c69-95f5-47ec-95c4-39e1ded68cc6][Burke Libbey - YouTube]]
** [[https://www.youtube.com/watch?v=2mG0zM_wtYs][Everything You Always Wanted To Know About Nix (But Were Afraid To Ask) - YouTube]]
:PROPERTIES:
:ID:       69d4adbf-d5cb-4cbb-90ea-5ea3f1bd5999
:END:


* Programming languages Environment
** wiki
- https://nixos.wiki/wiki/Language-specific_package_helpers

** Nix [[file:~/Dropbox/org-notes/braindump/programming/rust/guangtao_rust.org][GuangTao's Rust]]
:PROPERTIES:
:id: 8eba3b48-150b-4ca6-a794-79f341d860aa
:END:
- [2020-12-07 Mon 21:01] -> [[id:36aa9c9d-bf10-40f0-9463-b5169ffa1f2a][nix-community/redoxpkgs: Cross-compile to Redox using Nix [maintainer=@aaronjanse]​]]
*** [[https://discourse.nixos.org/t/comparing-solutions-for-building-rust-on-nix/10707][Comparing solutions for building Rust on Nix - Development - NixOS Discourse]]
*** [[https://github.com/oxalica/rust-overlay][oxalica/rust-overlay]]
:PROPERTIES:
:ID:       41252713-70ef-4d4f-b6b8-22ad53c69235
:END:

- [2021-01-02 Sat 15:44] <- [[id:a3de31d7-f2be-4939-a19f-0bfd4ddba542][rust nix]]
*** [[https://github.com/nmattia/naersk][nmattia/naersk: Build rust crates in Nix. No configuration, no code generation, no IFD. Sandbox friendly.]]
:PROPERTIES:
:id: 02aa0111-a92e-41d6-abca-ce4cc6c7a931
:END:
- [2020-11-11 Wed 16:19] <- [[id:a3de31d7-f2be-4939-a19f-0bfd4ddba542][rust nix]]
*** [[https://github.com/Kloenk/rusty-nix][Kloenk/rusty-nix: Nix written in rust (this will take some time if it will ever finish)]]
*** [[https://github.com/kolloch/crate2nix][kolloch/crate2nix: nix build file generator for rust crates]]
** Nix [[file:../programming/guangtao_python.org][GuangTao's Python]]
:PROPERTIES:
:ID:       f08fdb79-58f8-4186-b890-06e1486702e9
:END:
[[id:2154d26e-213b-4ef4-9081-4960f8facb73][How to override Python package (Anki)? - Learn - NixOS Discourse]]
*** [[https://github.com/DavHau/mach-nix][GitHub - DavHau/mach-nix: Tool to create highly reproducible python environments]]
#+begin_src sh :async t :exports both :results output
nix-env -if https://github.com/DavHau/mach-nix/tarball/2.4.1 -A mach-nix
#+end_src

** Nix [[file:../programming/guangtao_golang.org][GuangTao's Golang]]
:PROPERTIES:
:id: 33107453-baf3-4e27-871b-833b93f5ad76
:END:
- [2020-11-20 Fri 01:18] -> [[id:d1d661f8-178c-4bd9-b848-0a2b768066f5][orivej/go-nix: Nix language parser and Nix-compatible file hasher in Go]]

*** [[https://nixos.org/manual/nixpkgs/stable/#ssec-go-legacy][NixOS - Nixpkgs 20.03 manual]]

*** Go Nix discussing
- [[https://discourse.nixos.org/t/build-golang-code-provided-not-as-go-module/9543/10][Build GoLang code provided not as Go module - Learn - NixOS Discourse]]
  
** Nix [[file:../programming/node.org][GuangTao's Node Java]]
*** https://andreas.rammhold.de/posts/ranz2nix/
*** [[https://github.com/nix-community/yarn2nix][nix-community/yarn2nix: Generate nix expressions from a yarn.lock file [maintainer=???]​]]

** Nix [[file:../programming/guangtao_golang.org][GuangTao's Golang]]

*** C/C++ Nix infrastructure
:PROPERTIES:
:ID:       0680ffeb-a824-4dec-b15d-0e8ec04e97b9
:END:

- [2020-11-07 Sat 22:56] -> [[id:2cac43cc-1cbd-4092-a275-83856018a0a8][Nix Friday - C/CPP infrastructure in Nix - with Mic92 - YouTube]]

** Nix Ruby

*** [[https://github.com/nix-community/bundix][nix-community/bundix: Generates a Nix expression for your Bundler-managed application. [maintainer=@manveru]​]]

* Nix Security
** [[https://github.com/jollheef/localhost/blob/master/security.nix][localhost/security.nix at master · jollheef/localhost]]
** Nix SElinux
*** Security-Enhanced Linux
:PROPERTIES:
:original-authors: NSA and Red Hat
:developers: Red Hat
:initial-release: December 22, 2000; 19 years ago (2000-12-22)
:stable-release: 3.0/4 December 2019; 10 months ago (2019-12-04)
:repository: github.com/SELinuxProject/selinux
:written-in: C
:operating-system: Linux
:type:     Security, Linux Security Modules (LSM)
:license:  GNU GPL
:website:  selinuxproject.org, nsa.gov/What-We-Do/Research/SELinux/
:wikinfo-id: 55908
:URL:      https://en.wikipedia.org?curid=55908
:END:
Security-Enhanced Linux (SELinux) is a Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC). SELinux is a set of kernel modifications and user-space tools that have been added to various Linux distributions. Its architecture strives to separate enforcement of security decisions from the security policy, and streamlines the amount of software involved with security policy enforcement.

- [[https://www.redhat.com/zh/topics/linux/what-is-selinux][SELinux是什么? 开启SELinux - 红帽]]
  
*** [[https://nixos.wiki/wiki/Workgroup:SELinux][Workgroup:SELinux - NixOS Wiki]]
#+begin_src nix :async t :exports both :results output
 boot.kernelPatches = [ {
       name = "selinux-config";
       patch = null;
       extraConfig =
               SECURITY_SELINUX y
               SECURITY_SELINUX_BOOTPARAM n
               SECURITY_SELINUX_DISABLE n
               SECURITY_SELINUX_DEVELOP y
               SECURITY_SELINUX_AVC_STATS y
               SECURITY_SELINUX_CHECKREQPROT_VALUE 0
               DEFAULT_SECURITY_SELINUX n
             ;
       } ];
#+end_src
** Nix vulnerability
*** [[https://github.com/andir/nix-vulnerability-scanner][andir/nix-vulnerability-scanner]]
** Nix Security option
*** [[https://discourse.nixos.org/t/default-security-settings/9755/2][Default security settings - Development / Security - NixOS Discourse]]
#+begin_src nix :async t :exports both :results output
security.lockKernelModules = false 
#+end_src


Disable kernel module loading once the system is fully initialised.
Module loading is disabled until the next reboot.  Problems caused by delayed module loading can be fixed by adding the module(s) in question to <option>boot.kernelModule

* Nix Hash
** [[https://github.com/jwiegley/nix-update-el][jwiegley/nix-update-el: An Emacs command for updating fetch declarations in place]]
** [[https://github.com/numtide/rnix-hashes][numtide/rnix-hashes: Nix Hash Converter]]


* Nix Env
** [[https://github.com/target/lorri][target/lorri: Your project's nix-env]]


* Nix template
** [[https://github.com/nix-dot-dev/getting-started-nix-template][nix-dot-dev/getting-started-nix-template: Based on nix.dev tutorials, repository template to get you started with Nix.]]


* Audio

** [[https://github.com/lopsided98/zeus_audio/blob/master/flake.nix][zeus_audio/flake.nix at master · lopsided98/zeus_audio]]

* Nix Router

** https://github.com/GTrunSec/nixwrt
* Service deployment
** [[https://github.com/svanderburg/disnix][svanderburg/disnix: Disnix: A Nix-based distributed service deployment tool]]
*** [[https://sandervanderburg.blogspot.com/2020/10/transforming-disnix-models-to-graphs.html][Sander van der Burg's blog: Transforming Disnix models to graphs and visualizing them]]

** https://github.com/svanderburg/nix-processmgmt

* Enhanced nix configuration
** [[https://github.com/tweag/nickel][tweag/nickel: Cheap configuration language]] :parser:query:

Nickel is a lightweight configuration language. Its purpose is to automate the generation of static configuration files - think JSON, YAML, XML, or your favorite data representation language - that are then fed to another system. It is designed to have a simple, well-understood core: at its heart, it is JSON with functions. It adds other features on top of it to improve expressivity and modularity, but you can do just fine without using it.
* Nix Emacs
** [[https://github.com/vlaci/nix-doom-emacs][vlaci/nix-doom-emacs: doom-emacs packaged for Nix]]
** [[https://github.com/nix-community/emacs-overlay][nix-community/emacs-overlay: Bleeding edge emacs overlay [maintainer=@adisbladis]​]]
* ROS to Nix
:PROPERTIES:
:ID:       dc7cc7f9-fb80-46d1-89c7-cb7def5ba1f4
:END:

- [2020-10-30 Fri 02:59] -> [[id:f97dc1ae-97a8-44ca-8f94-1212d8905c12][lopsided98/nix-ros-overlay: ROS overlay for the Nix package manager]]

* NixOS container
** [[https://github.com/erikarvstedt/extra-container][erikarvstedt/extra-container: Run declarative NixOS containers without full system rebuilds]]

* Other language implementation Nix

** [[https://github.com/haskell-nix/hnix][haskell-nix/hnix: A Haskell re-implementation of the Nix expression language]]

_ [[file:guangtao_haskell.org][GuangTao's Haskell]]
* Nix cross-compiling
** [[https://github.com/pololu/nixcrpkgs][pololu/nixcrpkgs: Tools for cross-compiling standalone applications using Nix.]]
** [[https://github.com/Mic92/nix-ld][Mic92/nix-ld: Run unpatched dynamic binaries on NixOS]]
** [[https://github.com/Fuseteam/thefloweringash][Fuseteam/thefloweringash]] :arm:
* Nix ISSUE
** Nix flake issue
:PROPERTIES:
:ID:       fdf6b3e7-b611-449e-889b-bd8398b252e1
:END:
- [2020-11-09 Mon 22:30] <- [[id:0fbe152b-bad6-4054-a201-c51ab509ed73][flakes]]
*** [[https://github.com/NixOS/nix/issues/3821][Adding package to devShell causes `error: stack overflow (possible infinite recursion)` · Issue #3821 · NixOS/nix]]

#+begin_src nix :async t :exports both :results output
systemd.services.nix-daemon.serviceConfig.LimitSTACKSoft = "infinity";
#+end_src

* Nix develop
:PROPERTIES:
:ID:       219e0640-4ec4-4af6-8e0c-6d54b5390d37
:END:

** Nix Develop 3rdparty

*** [[https://github.com/maralorn/nix-output-monitor][maralorn/nix-output-monitor: Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.]]
** [[https://github.com/NixOS/nix/pull/4161/commits/750ce500c221ecd4720a5b02e3f3cbb0bc05ef9d][nix develop: Add --redirect flag to redirect dependencies by edolstra · Pull Request #4161 · NixOS/nix]]
:PROPERTIES:
:ID:       6e001e4d-4564-40ac-bba4-ffb93f8aba23
:END:
- [2020-12-19 Sat 13:43] -> [[id:d664a2a5-461f-4aa7-8bd3-ed6e8934ce7a][flake devShell]]
** Tweag Nix develop
*** [[https://discourse.nixos.org/t/tweag-nix-dev-update-5/10560][Tweag + Nix Dev Update #5 - Development - NixOS Discourse]]
:PROPERTIES:
:ID:       14fa5200-b22f-44fa-b76a-a91e44d1090f
:END:

- [2021-01-05 Tue 02:12] <- [[id:e69bb8b4-75e9-4887-98f4-73542602e8c6][flakes dev update]]
*** [[https://discourse.nixos.org/t/tweag-nix-dev-update-4/9862][Tweag + Nix Dev Update #4 - Development - NixOS Discourse]]
:PROPERTIES:
:ID:       ff924256-2d59-47ec-9b6f-a67263b5534d
:END:

- [2021-01-05 Tue 02:13] <- [[id:e69bb8b4-75e9-4887-98f4-73542602e8c6][flakes dev update]]
#+begin_src nix :async t :exports both :results output
nix develop \
  --redirect .#hydraJobs.build.x86_64-linux.nix ~/Dev/nix/outputs/out \
  --redirect .#hydraJobs.build.x86_64-linux.nix.dev ~/Dev/nix/outputs/dev
#+end_src

*** [[https://discourse.nixos.org/t/tweag-nix-dev-update-3/7154][Tweag + Nix Dev Update #3 - Development - NixOS Discourse]]
:PROPERTIES:
:ID:       2ba3dbae-6d17-45d9-9285-2e3b55a4eec2
:END:

- [2021-01-05 Tue 02:13] <- [[id:d664a2a5-461f-4aa7-8bd3-ed6e8934ce7a][flake devShell]]
- [2021-01-05 Tue 02:13] <- [[id:e69bb8b4-75e9-4887-98f4-73542602e8c6][flakes dev update]]
*** [[https://discourse.nixos.org/t/tweag-nix-dev-update-2/6808][Tweag + Nix Dev Update #2 - Development - NixOS Discourse]]

*** [[https://discourse.nixos.org/t/tweag-nix-dev-update/6525][Tweag + Nix Dev Update - Development - NixOS Discourse]]

* Visual Nix

** [[https://github.com/GTrunSec/grafanix][GTrunSec/grafanix: Visualize your Nix dependencies!]]

** [[https://github.com/symphorien/nix-du][symphorien/nix-du: Visualise which gc-roots to delete to free some space in your nix store]]
* Nix dependency manager
** [[https://github.com/obsidiansystems/nix-thunk][obsidiansystems/nix-thunk]]

* Nix GUI
** [[https://github.com/pmiddend/nixos-manager][pmiddend/nixos-manager: Manage your NixOS packages and configuration via a simple, intuitive UI]]

* Nix Project
:PROPERTIES:
:ID:       7313dc74-f2de-49f9-8f73-87aac798cb00
:END:

- [2021-01-22 Fri 15:22] <- [[id:3c699375-3ec9-4b71-af3f-a49f88527e0b][nix-community/nix-data: Standard set of packages and overlays for data-scientists [maintainer=@tbenst]​]]
** [[https://github.com/tweag/jupyterWith][tweag/jupyterWith: declarative and reproducible Jupyter environments - powered by Nix]]
:PROPERTIES:
:ID: d2d3ecc6-4e75-483f-88b3-7a5d3bfbbd81
:END:

- [2020-11-23 Mon 20:02] <- [[id:5bad5a83-d6ab-44bd-a40d-ddcefb4928f5][add examples for mach-nix and conda by DavHau · Pull Request #135 · tweag/jupyterWith]]


* Nix Modules
:PROPERTIES:
:ID:       a931ebeb-015b-49fd-875b-682986cef960
:BRAIN_FRIENDS:
:END:
- [2020-12-20 Sun 19:59] <- [[id:8ce6b2f8-5342-4d49-8518-5ffb551d1ec5][obsidiansystems/obelisk-systemd: Turn your obelisk app into a systemd service]]

** [[https://github.com/nix-community/impermanence][nix-community/impermanence: Modules to help you handle persistent state on systems with ephemeral root storage [maintainer=@talyz]​]] :storage:



* Nix to Npm
** [[https://github.com/serokell/nix-npm-buildpackage][serokell/nix-npm-buildpackage: Build nix packages that use npm/yarn]]
